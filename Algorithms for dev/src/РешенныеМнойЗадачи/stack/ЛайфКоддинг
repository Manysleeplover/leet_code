
Задача 1

class Parent {
    public int age = 50;
    public void method(){
        System.out.println("parent method work");
    }
}

class Child extends Parent {
    public int age = 20;

    @Override
    public void method() {
        System.out.println("child method work");
    }

    public void printAge() {
        System.out.println(age);
    }
}

public class Main {
    public static void main(String[] args) {
        Parent object = new Child();
        object.method();
        object.printAge();
    }
}






Задача 2


        List<Integer> integerList = List.of(4, 3, 2);
        integerList.forEach(System.out::println);     //4,3,2
        integerList.sort(Comparator.naturalOrder());
        integerList.forEach(System.out::println);     //2,3,4
        integerList.add(1);
        integerList.forEach(System.out::println);     //2,3,4,1








   Задача 3

    static int value = 0;

    public static void main(String[] args) {
        for (int i = 0; i < 1000; i++) {
            new Thread(() -> {
                for (int j = 0; j < 1000; j++) {

                    value++;
                }
            }).start();
        }
        System.out.println(value);
    }





Задача 4

        var list = Arrays.asList("java", "kotlin", "scala");
        var stream = list.stream();
        stream.forEach(System.out::println);
        stream.forEach(System.out::println);














    Задача 5


class Student {
    public List<Integer> getMarks() {
        return marks;
    }

    private List<Integer> marks;

    public Student(List<Integer> marks) {
        this.marks = marks;
    }
}

//Дан лист студентов, в каждом объекте которого есть лист оценок. Необходимо вычислить среднее оценок всех студентов, где оценки выше либо равны 4

public class TestCase{
    psvm{
    	students.stream.flatMap(student -> student.marks().stream()).filter(mark -> mark >= 4).mapToInt(mark -> mark).average();
    }
}











Задача 6


class Author {

    private String name;
    private final List<Book> books;

    Author(String name, List<Book> books) {
        this.books = books;
    }

    public List<Book> getBooks() {
        return books;
    }
}

class Book {
    private final String title;

    Book(String title) {
        this.title = title;
    }

    public String getTitle() {
        return title;
    }
}

public class Main {

    // Вернуть Collection<String>  без повторений title всех авторов
    public static void main(String[] args) {
        Author author1 = new Author("Ivan", Arrays.asList(new Book("A"), new Book("B"), new Book("C"), new Book("A")));
        Author author2 = new Author("Petr", Arrays.asList(new Book("A"), new Book("B"), new Book("D")));
        List<Author> list1 = List.of(author1, author2);
        list1.stream().flatMap(authors -> authors.getBooks().stream()).map(book -> bool.getTitle()).collect(Collectors.toSet())

    }
}





Задача 7

//    Вывести имена авторов и названия книг, у которых названия книг начинается на "П".

create table books(id uuid not null,
                   name varchar not null);

    create table authors(id uuid not null,
                         name varchar not null);

    create table books_authors(id_book uuid not null,
                               id_author uuid not null);

    insert into books(id, name) values
('123e4567-e89b-12d3-a456-556642440000', 'Призрак оперы');
    insert into books(id, name) values
('123e4567-e89b-12d3-a456-556642440010', 'Выживший');
    insert into books(id, name) values
('123e4567-e89b-12d3-a456-556642440020', 'Собор Парижской Богоматери');
    insert into books(id, name) values
('123e4567-e89b-12d3-a456-556642440030', 'Грозовой перевал');

    insert into authors(id, name) values
('123e4567-e89b-12d3-a456-556642440001', 'Гастона Леру');
    insert into authors(id, name) values
('123e4567-e89b-12d3-a456-556642440011', 'Майкла Пунке');
    insert into authors(id, name) values
('123e4567-e89b-12d3-a456-556642440021', 'Виктор Гюго');
    insert into authors(id, name) values
('123e4567-e89b-12d3-a456-556642440031', 'Эмили Бронте');

    insert into books_authors(id_book, id_author) values
('123e4567-e89b-12d3-a456-556642440000', '123e4567-e89b-12d3-a456-556642440001');
    insert into books_authors(id_book, id_author) values
('123e4567-e89b-12d3-a456-556642440010', '123e4567-e89b-12d3-a456-556642440011');
    insert into books_authors(id_book, id_author) values
('123e4567-e89b-12d3-a456-556642440020', '123e4567-e89b-12d3-a456-556642440021');
    insert into books_authors(id_book, id_author) values
('123e4567-e89b-12d3-a456-556642440030', '123e4567-e89b-12d3-a456-556642440031');








Задача 8

    --Напишите запрос, который вернет всех сотрудников, у которых зп выше средней
    create table employee(id uuid not null,
                          name varchar not null,
                          salary numeric not null);

    insert into employee(id, name, salary) values
('123e4567-e89b-12d3-a456-556642440000', 'Иванов Иван Иванович', 150);
    insert into employee(id, name, salary) values
('123e4567-e89b-12d3-a456-556642440010', 'Петров Петр Петрович', 200);
    insert into employee(id, name, salary) values
('123e4567-e89b-12d3-a456-556642440020', 'Сидоров Сидр Сидорович', 100);
    insert into employee(id, name, salary) values
('123e4567-e89b-12d3-a456-556642440030', 'Павлов Павел Павлович', 1500);










Задача 9


    // Есть список целочисленных чисел.
// Вывести пары для чисел, которые встречаются более 2 раз
// <число из списка> -> <сколько раз число встречается>
// Пример: [10, 15, 23, 10, 15, 10, 66, 10, 66, 15] ->
// 10 -> 4
// 15 -> 3

        int[] mas = {10, 15, 23, 10, 15, 10, 66, 10, 66, 15};
      	Map<Integer,Integer) map = new HashMap<>();
        for(int i = 0; i < mas.length; i++){
        	if(!map.containsKey(mas[i])){
          	map.put(mas[i], 1);
          } else {
          	map.put(mas[i], map.getOrDefault(mas[i],1) + 1);
          }
        }
        sout(map)















