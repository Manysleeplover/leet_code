https://habr.com/ru/companies/ruvds/articles/487878/



https://www.db-fiddle.com/


person
id      name        pos_id
1       Владимир    1
2       Иван        3
3       Александр   2

positions
id      title
1       Дизайнер
2       Тестировщик
3       Разработчик



1. Написать create script
2. Написать insert script

create table positions(
	id bigserial primary key,
    title varchar(32)
);

create table persons(
	id bigserial primary key,
  	name varchar(32),
  	pos_id bigint,
  	foreign key(pos_id) references positions(id)
);

insert into positions values(1, 'Дизайнер');
insert into positions values(2, 'Тестировщик');
insert into positions values(3, 'Разработчик');


insert into persons values(1, 'Владимир',1);
insert into persons values(2, 'Иван',3);
insert into persons values(3, 'Александр',2);

3. получить результат в виде таблицы
   id      name        pos_title
   1       Владимир    Дизайнер
   2       Иван        Разработчик
   3       Александр   Тестировщик

SELECT persons.id, name, title AS pos_title
   FROM persons INNER JOIN positions
   ON persons.pos_id=positions.id;

4. Представим, что в подразделении упразднили должность тестировщика, вместо них идут разработчики. Внести изменения в базу.
update persons set pos_id = 3 where pos_id = 2;
delete from positions where title = 'Тестировщик';
SELECT persons.id, name, title AS pos_title
   FROM persons INNER JOIN positions
   ON persons.pos_id=positions.id;

6.
Получить список всех сотрудников, у которых имя начинается на 'В'
select * from persons where name ilike 'В%';





7.
transactions
        date					cash_flow
        2023-01-01		-1000
        2023-01-02		-100
        2023-01-03		 50

получить нарастающий итог для денежного потока каждый день таким образом, чтобы в конечном итоге получилась таблица
        date					cash_flow				    cumulative_cf
        2023-01-01		    -1000						-1000
        2023-01-02		    -100						-1100
        2023-01-03		     50							-1050


create table transactions(
	date date,
  	cash_flow int
);

**Schema (PostgreSQL v15)**

    create table transactions(
    	date date,
      	cash_flow int
    );

    insert into transactions values('2023-01-01', -1000);
    insert into transactions values('2023-01-02', -100);
    insert into transactions values('2023-01-03', 150);
    insert into transactions values('2023-01-05', 350);
    insert into transactions values('2023-01-06', 450);
    insert into transactions values('2023-01-07', 550);


| date                     | cash_flow | sum   |
| ------------------------ | --------- | ----- |
| 2023-01-01T00:00:00.000Z | -1000     | -1000 |
| 2023-01-02T00:00:00.000Z | -100      | -1100 |
| 2023-01-03T00:00:00.000Z | 150       | -950  |
| 2023-01-05T00:00:00.000Z | 350       | -600  |
| 2023-01-06T00:00:00.000Z | 450       | -150  |
| 2023-01-07T00:00:00.000Z | 550       | 400   |


select date, cash_flow, sum(cash_flow) over (order by date) from transactions;

8. Получить вторую максимальную  транзакцию
select max(cash_flow) from transactions where cash_flow != (select max(cash_flow) from transactions)

SELECT
    coalesce(
        (SELECT DISTINCT cash_flow
        FROM transactions
        ORDER BY cash_flow DESC
        LIMIT 1 OFFSET 1
        ), null) as result
FROM transactions
LIMIT 1